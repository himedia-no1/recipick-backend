CREATE OR REPLACE FUNCTION trg_set_timestamps_at() RETURNS TRIGGER AS
$$
BEGIN
    IF TG_OP = 'INSERT' THEN
        NEW.created_at := NOW();
        NEW.updated_at := NOW();

        IF NEW.is_deleted IS TRUE THEN NEW.deleted_at := NOW(); ELSE NEW.deleted_at := NULL; END IF;

        RETURN NEW;
    ELSIF TG_OP = 'UPDATE' THEN
        NEW.created_at := OLD.created_at;
        NEW.updated_at := NOW();

        IF NEW.is_deleted IS DISTINCT FROM OLD.is_deleted THEN
            IF NEW.is_deleted IS TRUE THEN NEW.deleted_at := NOW(); ELSE NEW.deleted_at := NULL; END IF;
        ELSE
            NEW.deleted_at := OLD.deleted_at;
        END IF;

        RETURN NEW;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION trg_set_created_at() RETURNS TRIGGER AS
$$
BEGIN
    IF TG_OP = 'INSERT' THEN
        NEW.created_at := NOW();
        RETURN NEW;
    ELSIF TG_OP = 'UPDATE' THEN
        NEW.created_at := OLD.created_at;
        RETURN NEW;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TABLE credential_types (
    id    INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    value VARCHAR(20) NOT NULL UNIQUE
);
COMMENT ON TABLE credential_types IS '인증 타입 상수 테이블';

INSERT INTO credential_types (value)
VALUES ('GOOGLE'),
       ('NAVER'),
       ('KAKAO');


CREATE TABLE notification_types (
    id    INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    value VARCHAR(20) NOT NULL UNIQUE
);
COMMENT ON TABLE notification_types IS '알림 타입 상수 테이블';

INSERT INTO notification_types (value)
VALUES ('MESSAGE'),
       ('INVITE_FRIDGE');


CREATE TABLE recipe_levels (
    id    INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    value VARCHAR(20) NOT NULL UNIQUE
);
COMMENT ON TABLE recipe_levels IS '레시피 난이도 상수 테이블';

INSERT INTO recipe_levels (value)
VALUES ('VERY_EASY'),
       ('EASY'),
       ('NORMAL'),
       ('HARD'),
       ('VERY_HARD');


CREATE TABLE compartment_types (
    id    INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    value VARCHAR(20) NOT NULL UNIQUE
);
COMMENT ON TABLE compartment_types IS '보관실 타입 상수 테이블';

INSERT INTO compartment_types (value)
VALUES ('COOL'),
       ('FREEZE'),
       ('PANTRY');


CREATE TABLE ingredient_types (
    id    INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    value VARCHAR(20) NOT NULL UNIQUE
);
COMMENT ON TABLE ingredient_types IS '식재료 타입 상수 테이블';

INSERT INTO ingredient_types (value)
VALUES ('VEGETABLE'),
       ('FRUIT'),
       ('MEAT'),
       ('SEAFOOD'),
       ('DAIRY'),
       ('EGG'),
       ('GRAIN'),
       ('CANNED'),
       ('SNACK'),
       ('NOODLE'),
       ('BEVERAGE'),
       ('SEASONING'),
       ('FROZEN'),
       ('COOKED'),
       ('OTHER');


CREATE TABLE ingredient_states (
    id    INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    value VARCHAR(20) NOT NULL UNIQUE
);
COMMENT ON TABLE ingredient_states IS '식재료 상태 상수 테이블';

INSERT INTO ingredient_states (value)
VALUES ('FRESH'),
       ('NEAR_EXPIRY'),
       ('EXPIRED'),
       ('CONSUMED'),
       ('DISPOSED');


CREATE TABLE ingredient_categories (
    id    INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    value VARCHAR(50) NOT NULL UNIQUE
);
COMMENT ON TABLE ingredient_categories IS '식재료 카테고리 상수 테이블';


CREATE TABLE users (
    id                 INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    credential_type_id INT          NOT NULL,
    social_identity    VARCHAR(100) NOT NULL,
    email              VARCHAR(100) NOT NULL,
    nickname           VARCHAR(100) NOT NULL,
    profile_image      VARCHAR(100),
    created_at         TIMESTAMPTZ  NOT NULL DEFAULT NOW(),
    updated_at         TIMESTAMPTZ  NOT NULL DEFAULT NOW(),
    deleted_at         TIMESTAMPTZ,
    is_deleted         BOOLEAN      NOT NULL DEFAULT FALSE,
    CONSTRAINT fk_users_credential_type_id FOREIGN KEY (credential_type_id) REFERENCES credential_types (id)
);
CREATE UNIQUE INDEX uniq_users_nickname_active ON users (nickname) WHERE is_deleted IS FALSE;
CREATE INDEX idx_users_credential_type_id ON users (credential_type_id);
CREATE TRIGGER trg_users_timestamps_at
    BEFORE INSERT OR UPDATE
    ON users
    FOR EACH ROW
EXECUTE FUNCTION trg_set_timestamps_at();
COMMENT ON TABLE users IS '유저 테이블';


CREATE TABLE user_tokens (
    id            INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id       INT          NOT NULL,
    refresh_token VARCHAR(100) NOT NULL,
    created_at    TIMESTAMPTZ  NOT NULL DEFAULT NOW(),
    CONSTRAINT fk_user_tokens_user_id FOREIGN KEY (user_id) REFERENCES users (id)
);
CREATE INDEX idx_user_tokens_user_id ON user_tokens (user_id);
CREATE TRIGGER trg_user_tokens_created_at
    BEFORE INSERT OR UPDATE
    ON user_tokens
    FOR EACH ROW
EXECUTE FUNCTION trg_set_created_at();
COMMENT ON TABLE user_tokens IS '유저 JWT 토큰 테이블';


CREATE TABLE notifications (
    id                   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id              INT          NOT NULL,
    notification_type_id INT          NOT NULL,
    message              VARCHAR(500) NOT NULL,
    record_identity      INT,
    created_at           TIMESTAMPTZ  NOT NULL DEFAULT NOW(),
    CONSTRAINT fk_notifications_user_id FOREIGN KEY (user_id) REFERENCES users (id),
    CONSTRAINT fk_notifications_notification_type_id FOREIGN KEY (notification_type_id) REFERENCES notification_types (id)
);
CREATE INDEX idx_notifications_user_id ON notifications (user_id);
CREATE INDEX idx_notifications_notification_type_id ON notifications (notification_type_id);
CREATE TRIGGER trg_notifications_created_at
    BEFORE INSERT OR UPDATE
    ON notifications
    FOR EACH ROW
EXECUTE FUNCTION trg_set_created_at();
COMMENT ON TABLE notifications IS '알림 테이블';


CREATE TABLE recipes (
    id              INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    search_identity VARCHAR(10) NOT NULL UNIQUE,
    is_valid        BOOLEAN     NOT NULL,
    name            VARCHAR(100),
    description     VARCHAR(1000),
    serving         VARCHAR(50),
    time            VARCHAR(50),
    recipe_level_id INT,
    created_at      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    deleted_at      TIMESTAMPTZ,
    is_deleted      BOOLEAN     NOT NULL DEFAULT FALSE,
    CONSTRAINT fk_recipes_recipe_level_id FOREIGN KEY (recipe_level_id) REFERENCES recipe_levels (id)
);
CREATE INDEX idx_recipes_recipe_level_id ON recipes (recipe_level_id);
CREATE TRIGGER trg_recipes_timestamps_at
    BEFORE INSERT OR UPDATE
    ON recipes
    FOR EACH ROW
EXECUTE FUNCTION trg_set_timestamps_at();
COMMENT ON TABLE recipes IS '레시피 테이블';


CREATE TABLE recipe_details (
    id          INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    recipe_id   INT           NOT NULL,
    description VARCHAR(1000) NOT NULL,
    image       VARCHAR(100),
    CONSTRAINT fk_recipe_details_recipe_id FOREIGN KEY (recipe_id) REFERENCES recipes (id)
);
CREATE INDEX idx_recipe_details_recipe_id ON recipe_details (recipe_id);
COMMENT ON TABLE recipe_details IS '레시피 상세정보 테이블';


CREATE TABLE recipe_ingredients (
    id                     INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    recipe_id              INT          NOT NULL,
    name                   VARCHAR(100) NOT NULL,
    ingredient_category_id INT,
    CONSTRAINT fk_recipe_ingredients_recipe_id FOREIGN KEY (recipe_id) REFERENCES recipes (id),
    CONSTRAINT fk_recipe_ingredients_ingredient_category_id FOREIGN KEY (ingredient_category_id) REFERENCES ingredient_categories (id)
);
CREATE INDEX idx_recipe_ingredients_recipe_id ON recipe_ingredients (recipe_id);
CREATE INDEX idx_recipe_ingredients_ingredient_category_id ON recipe_ingredients (ingredient_category_id);
COMMENT ON TABLE recipe_ingredients IS '레시피 재료 테이블';


CREATE TABLE user_recipe_favorites (
    id         INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id    INT         NOT NULL,
    recipe_id  INT         NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    CONSTRAINT fk_user_recipe_favorites_user_id FOREIGN KEY (user_id) REFERENCES users (id),
    CONSTRAINT fk_user_recipe_favorites_recipe_id FOREIGN KEY (recipe_id) REFERENCES recipes (id)
);
CREATE UNIQUE INDEX uniq_user_recipe_favorites_user_id_recipe_id ON user_recipe_favorites (user_id, recipe_id);
CREATE TRIGGER trg_user_recipe_favorites_created_at
    BEFORE INSERT OR UPDATE
    ON user_recipe_favorites
    FOR EACH ROW
EXECUTE FUNCTION trg_set_created_at();
COMMENT ON TABLE user_recipe_favorites IS '찜한 레시피 테이블';


CREATE TABLE user_recipe_histories (
    id         INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id    INT         NOT NULL,
    recipe_id  INT         NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    CONSTRAINT fk_user_recipe_histories_user_id FOREIGN KEY (user_id) REFERENCES users (id),
    CONSTRAINT fk_user_recipe_histories_recipe_id FOREIGN KEY (recipe_id) REFERENCES recipes (id)
);
CREATE INDEX idx_user_recipe_histories_user_id ON user_recipe_histories (user_id);
CREATE INDEX idx_user_recipe_histories_recipe_id ON user_recipe_histories (recipe_id);
CREATE TRIGGER trg_user_recipe_histories_created_at
    BEFORE INSERT OR UPDATE
    ON user_recipe_histories
    FOR EACH ROW
EXECUTE FUNCTION trg_set_created_at();
COMMENT ON TABLE user_recipe_histories IS '요리한 레시피 테이블';


CREATE TABLE fridges (
    id         INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id    INT           NOT NULL,
    memo       VARCHAR(1000) NOT NULL,
    created_at TIMESTAMPTZ   NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ   NOT NULL DEFAULT NOW(),
    deleted_at TIMESTAMPTZ,
    is_deleted BOOLEAN       NOT NULL DEFAULT FALSE,
    CONSTRAINT fk_fridges_user_id FOREIGN KEY (user_id) REFERENCES users (id)
);
CREATE INDEX idx_fridges_user_id ON fridges (user_id);
CREATE TRIGGER trg_fridges_timestamps_at
    BEFORE INSERT OR UPDATE
    ON fridges
    FOR EACH ROW
EXECUTE FUNCTION trg_set_timestamps_at();
COMMENT ON TABLE fridges IS '냉장고 테이블';


CREATE TABLE user_fridges (
    id          INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id     INT          NOT NULL,
    fridge_id   INT          NOT NULL,
    name        VARCHAR(100) NOT NULL,
    is_default  BOOLEAN      NOT NULL,
    is_favorite BOOLEAN      NOT NULL,
    created_at  TIMESTAMPTZ  NOT NULL DEFAULT NOW(),
    updated_at  TIMESTAMPTZ  NOT NULL DEFAULT NOW(),
    deleted_at  TIMESTAMPTZ,
    is_deleted  BOOLEAN      NOT NULL DEFAULT FALSE,
    CONSTRAINT fk_user_fridges_user_id FOREIGN KEY (user_id) REFERENCES users (id),
    CONSTRAINT fk_user_fridges_fridge_id FOREIGN KEY (fridge_id) REFERENCES fridges (id)
);
CREATE UNIQUE INDEX uniq_user_fridges_user_id_fridge_id_active ON user_fridges (user_id, fridge_id) WHERE is_deleted IS FALSE;
CREATE INDEX idx_user_fridges_user_id ON user_fridges (user_id);
CREATE INDEX idx_user_fridges_fridge_id ON user_fridges (fridge_id);
CREATE TRIGGER trg_user_fridges_timestamps_at
    BEFORE INSERT OR UPDATE
    ON user_fridges
    FOR EACH ROW
EXECUTE FUNCTION trg_set_timestamps_at();
COMMENT ON TABLE user_fridges IS '개인화된 냉장고 테이블';


CREATE TABLE compartments (
    id                  INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    fridge_id           INT          NOT NULL,
    compartment_type_id INT          NOT NULL,
    name                VARCHAR(100) NOT NULL,
    created_at          TIMESTAMPTZ  NOT NULL DEFAULT NOW(),
    updated_at          TIMESTAMPTZ  NOT NULL DEFAULT NOW(),
    deleted_at          TIMESTAMPTZ,
    is_deleted          BOOLEAN      NOT NULL DEFAULT FALSE,
    CONSTRAINT fk_compartments_fridge_id FOREIGN KEY (fridge_id) REFERENCES fridges (id),
    CONSTRAINT fk_compartments_compartment_type_id FOREIGN KEY (compartment_type_id) REFERENCES compartment_types (id)
);
CREATE INDEX idx_compartments_fridge_id ON compartments (fridge_id);
CREATE INDEX idx_compartments_compartment_type_id ON compartments (compartment_type_id);
CREATE TRIGGER trg_compartments_timestamps_at
    BEFORE INSERT OR UPDATE
    ON compartments
    FOR EACH ROW
EXECUTE FUNCTION trg_set_timestamps_at();
COMMENT ON TABLE compartments IS '보관실 테이블';


CREATE TABLE ingredients (
    id                     INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    compartment_id         INT           NOT NULL,
    ingredient_type_id     INT           NOT NULL,
    name                   VARCHAR(100)  NOT NULL,
    ingredient_category_id INT,
    memo                   VARCHAR(1000) NOT NULL,
    expiration_date        TIMESTAMP,
    ingredient_state_id    INT           NOT NULL,
    created_at             TIMESTAMPTZ   NOT NULL DEFAULT NOW(),
    updated_at             TIMESTAMPTZ   NOT NULL DEFAULT NOW(),
    deleted_at             TIMESTAMPTZ,
    is_deleted             BOOLEAN       NOT NULL DEFAULT FALSE,
    CONSTRAINT fk_ingredients_compartment_id FOREIGN KEY (compartment_id) REFERENCES compartments (id),
    CONSTRAINT fk_ingredients_ingredient_type_id FOREIGN KEY (ingredient_type_id) REFERENCES ingredient_types (id),
    CONSTRAINT fk_ingredients_ingredient_category_id FOREIGN KEY (ingredient_category_id) REFERENCES ingredient_categories (id),
    CONSTRAINT fk_ingredients_ingredient_state_id FOREIGN KEY (ingredient_state_id) REFERENCES ingredient_states (id)
);
CREATE INDEX idx_ingredients_compartment_id ON ingredients (compartment_id);
CREATE INDEX idx_ingredients_ingredient_type_id ON ingredients (ingredient_type_id);
CREATE INDEX idx_ingredients_ingredient_category_id ON ingredients (ingredient_category_id);
CREATE INDEX idx_ingredients_ingredient_state_id ON ingredients (ingredient_state_id);
CREATE TRIGGER trg_ingredients_timestamps_at
    BEFORE INSERT OR UPDATE
    ON ingredients
    FOR EACH ROW
EXECUTE FUNCTION trg_set_timestamps_at();
COMMENT ON TABLE ingredients IS '식재료 테이블';