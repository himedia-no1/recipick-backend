name: 빌드

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ dev ]

jobs:
  detect-changes:
    name: 변경된 모듈 감지
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.determine-modules.outputs.modules }}
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: 모듈 감지 및 필터 생성
        id: generate-filters
        run: |
          [ ! -d "apps" ] && exit 1

          MODULES=$(ls -1 apps/ | tr '\n' ',' | sed 's/,$//')
          echo "modules=$MODULES" >> $GITHUB_OUTPUT

          filters="root: ['**', '!apps/**']"
          IFS=',' read -ra MODULE_ARRAY <<< "$MODULES"
          for module in "${MODULE_ARRAY[@]}"; do
            filters="${filters}"$'\n'"${module}: 'apps/${module}/**'"
          done

          echo "filters<<EOF" >> $GITHUB_OUTPUT
          echo "$filters" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 변경된 경로 확인
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: ${{ steps.generate-filters.outputs.filters }}

      - name: 빌드할 모듈 결정
        id: determine-modules
        run: |
          DETECTED_MODULES="${{ steps.generate-filters.outputs.modules }}"
          IFS=',' read -ra MODULE_ARRAY <<< "$DETECTED_MODULES"
          ALL_MODULES=$(printf '%s\n' "${MODULE_ARRAY[@]}" | jq -R . | jq -s . -c)

          if [[ "${{ steps.filter.outputs.root }}" == "true" ]]; then
            echo "modules=${ALL_MODULES}" >> $GITHUB_OUTPUT
          else
            modules=$(echo '${{ steps.filter.outputs.changes }}' | jq -c '. | map(select(. != "root"))')
            echo "modules=${modules}" >> $GITHUB_OUTPUT
          fi

  build:
    name: ${{ matrix.module }} 이미지 빌드
    needs: detect-changes
    if: needs.detect-changes.outputs.modules != '[]'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        module: ${{ fromJSON(needs.detect-changes.outputs.modules) }}
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: 컨테이너 레지스트리 로그인
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 이미지 메타데이터 생성
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/recipick-backend-${{ matrix.module }}
          tags: |
            type=raw,value=prod,enable={{is_default_branch}}
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/dev' }}
            type=sha,prefix=prod-,enable={{is_default_branch}}
            type=sha,prefix=dev-,enable=${{ github.ref == 'refs/heads/dev' }}
            type=ref,event=pr

      - name: Docker 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name == 'push' }}
          build-args: MODULE=${{ matrix.module }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.module }}
          cache-to: type=gha,mode=max,scope=${{ matrix.module }}