name: Build

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ dev ]

env:
  # 새 모듈 추가시 여기만 수정
  MODULES: 'admin-api, admin-auth, user-api, user-auth, batch, crawler'

jobs:
  # 변경된 파일을 감지하여 빌드할 모듈 결정
  detect-changes:
    name: Detect changed modules
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.determine-modules.outputs.modules }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate path filters
        id: generate-filters
        run: |
          # 루트 파일 변경시 전체 빌드 대상 (apps/ 제외한 모든 파일)
          filters="root: ['**', '!apps/**']"

          # 각 모듈별 경로 필터 생성
          IFS=',' read -ra MODULE_ARRAY <<< "${{ env.MODULES }}"
          for module in "${MODULE_ARRAY[@]}"; do
            module=$(echo "$module" | xargs)  # 공백 제거
            filters="${filters}"$'\n'"${module}: 'apps/${module}/**'"
          done

          echo "filters<<EOF" >> $GITHUB_OUTPUT
          echo "$filters" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check changed paths
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: ${{ steps.generate-filters.outputs.filters }}

      - name: Determine modules to build
        id: determine-modules
        run: |
          # 환경변수에서 모든 모듈 목록 생성
          IFS=',' read -ra MODULE_ARRAY <<< "${{ env.MODULES }}"
          # 공백 제거
          CLEANED_MODULES=()
          for module in "${MODULE_ARRAY[@]}"; do
            CLEANED_MODULES+=($(echo "$module" | xargs))
          done
          ALL_MODULES=$(printf '%s\n' "${CLEANED_MODULES[@]}" | jq -R . | jq -s .)

          if [[ "${{ steps.filter.outputs.root }}" == "true" ]]; then
            # 루트 파일 변경시 전체 모듈 빌드
            echo "Root files changed - building all modules"
            echo "modules=${ALL_MODULES}" >> $GITHUB_OUTPUT
          else
            # 개별 모듈 변경시 해당 모듈만 빌드
            modules=$(echo '${{ steps.filter.outputs.changes }}' | jq -c '. | map(select(. != "root"))')
            echo "Individual modules changed: ${modules}"
            echo "modules=${modules}" >> $GITHUB_OUTPUT
          fi

  # 변경된 모듈들을 병렬로 빌드
  build:
    name: Build Docker images
    needs: detect-changes
    if: needs.detect-changes.outputs.modules != '[]'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        module: ${{ fromJSON(needs.detect-changes.outputs.modules) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        if: github.event_name == 'push'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/recipick-backend-${{ matrix.module }}
          tags: |
            type=raw,value=prod,enable={{is_default_branch}}
            type=raw,value=dev,enable=${{ github.ref == 'refs/heads/dev' }}
            type=sha,prefix=prod-,enable={{is_default_branch}}
            type=sha,prefix=dev-,enable=${{ github.ref == 'refs/heads/dev' }}
            type=ref,event=pr

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name == 'push' }}
          build-args: MODULE=${{ matrix.module }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.module }}
          cache-to: type=gha,mode=max,scope=${{ matrix.module }}